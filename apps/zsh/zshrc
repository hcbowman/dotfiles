# Load aliases.zsh, functions.zsh, etc.
for file in ~/.dotfiles/apps/zsh/{aliases,functions}.zsh; do
	[ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;

# NVM Directory Location
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# zsh-nvm plugin
# Export nvm completion settings for zsh-nvm plugin
export NVM_COMPLETION=true

# Lazy-loading nvm makes nvm available only when it is needed: when running nvm, node, npm or gloablly installed command for the first time, and not right away then the shell starts. 
export NVM_LAZY_LOAD=true

# If you want to trigger the lazy loading via extra arbitrary commands you can define NVM_LAZY_LOAD_EXTRA_COMMANDS and set it to an array of commands as strings. This can be usefull if programs are not in the above list of binaries but do depend on the availability of node, e.g. a vim plugin.
#export NVM_LAZY_LOAD_EXTRA_COMMANDS=('vim')
#vim --version
#node is now loaded

##### Disabled for the Warp terminal after the next line #####
if [[ $TERM_PROGRAM != "WarpTerminal" ]]; then
## Powerlevel10k
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME=""

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  zsh-nvm
  zsh-better-npm-completion
  git
  brew
  )

source $ZSH/oh-my-zsh.sh

## iTerm2 shell integration
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
fi
##### Disabled for the Warp terminal above #####

##### iTerm.app incompatable stuff below  #####
if [[ $TERM_PROGRAM != "iTerm.app" ]]; then

if [ -r $HOME/.dotfiles/apps/zsh/starship.zsh ] && [ -f $HOME/.dotfiles/apps/zsh/starship.zsh ]; then
source $HOME/.dotfiles/apps/zsh/starship.zsh
fi

if [ -r $HOME/.oh-my-zsh/custom/plugins/zsh-nvm ] && [ -f $HOME/.oh-my-zsh/custom/plugins/zsh-nvm ]; then
source $HOME/.oh-my-zsh/custom/plugins/zsh-nvm
fi

# The `autoload -Uz compinit` command is used to automatically load the `compinit`` function when it is first called.
#This can be useful in situations where the completion system is not frequently used and you want to save memory by not having it loaded all the time.
autoload -Uz compinit
compinit
fi
##### iTerm.app incompatable stuff above #####

### PATHS
# Java Platform, Standard Edition
export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"

# EMCAS
export PATH="$HOME/.emacs.d/bin:$PATH"

# Added by JetBrains Toolbox App
export PATH="$PATH:$HOME/Library/Application Support/JetBrains/Toolbox/scripts"

# Pywal
export PATH="${PATH}:${HOME}/.local/bin/"

# 1Password Shell Complition
eval "$(op completion zsh)"; compdef _op op

# Initialize the autocompletion ... I guess Powerlevel10k calls this for us.
#FYI The -i flag is used with the compinit command in Zsh to enable the "incremental completion" feature. 
#autoload -Uz compinit && compinit -i

# already in .zprofile?
#eval "$(pyenv init -)"

### Snips

# OpenSSL
# A CA file has been bootstrapped using certificates from the system
# keychain. To add additional certificates, place .pem files in
#   /opt/homebrew/etc/openssl@3/certs

# and run
#   /opt/homebrew/opt/openssl@3/bin/c_rehash2

# openssl@3 is keg-only, which means it was not symlinked into /opt/homebrew,
# because macOS provides LibreSSL.

# If you need to have openssl@3 first in your PATH, run:
#   echo 'export PATH="/opt/homebrew/opt/openssl@3/bin:$PATH"' >> ~/.zshrc

# For compilers to find openssl@3 you may need to set:
#   export LDFLAGS="-L/opt/homebrew/opt/openssl@3/lib"
#   export CPPFLAGS="-I/opt/homebrew/opt/openssl@3/include"

# For pkg-config to find openssl@3 you may need to set:
#   export PKG_CONFIG_PATH="/opt/homebrew/opt/openssl@3/lib/pkgconfig"

# ==> protobuf
# Emacs Lisp files have been installed to:
#   /opt/homebrew/share/emacs/site-lisp/protobuf





# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/opt/homebrew/Caskroom/miniforge/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh" ]; then
        . "/opt/homebrew/Caskroom/miniforge/base/etc/profile.d/conda.sh"
    else
        export PATH="/opt/homebrew/Caskroom/miniforge/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

